#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[{"name":"spiral"}]}}

#!markdown

# Hangul

#!markdown

## Tests

#!fsharp

let AssertAreEqual (expected: 'T, actual: 'T) =
    if expected <> actual then
        failwithf "Expected %A but got %A" expected actual

let AssertIsTrue (condition: bool) =
    if not condition then
        failwith "Expected condition to be true."

let AssertIsFalse (condition: bool) =
    if condition then
        failwith "Expected condition to be false."

#!markdown

## Hanja

#!fsharp

#!import hanja.fs

// let hanjaToHangulTable =
//     [|
//         0x4906, 0xaddc; 0x6d89, 0xc12d; 0x920c, 0xacb0; 0x3c93, 0xc218; 0x6116, 0xc2ec; 0x8599, 0xce58;
//         0x54a3, 0xad49; 0x7926, 0xad11; 0x9da9, 0xbaa9; 0x4830, 0xad8c; 0x6cb3, 0xd558; 0x9136, 0xd68c;
//         // (...)
//         0x47d0, 0xb825; 0x84d2, 0xd55c; 0x5a59, 0xc815; 0x975b, 0xc804; 0x6ce2, 0xd30c; 0x4269, 0xad6c;
//         0x7f6b, 0xad18; 0x54f2, 0xcca0; 0x91f4, 0xc775; 0x677b, 0xb274
//     |]
//     |> Map.ofArray

#!markdown

### hanjaConvert

#!fsharp

let hanjaConvert (s: string) =
    s
    |> Seq.map (fun c ->
        match hanjaToHangulTable.TryFind(int c) with
        | Some h -> char h
        | None -> c
    )
    |> String.Concat

#!fsharp

//// test

AssertAreEqual("국어", hanjaConvert "國語")

#!markdown

## Hangul

#!markdown

### Literals

#!fsharp

let [<Literal>] G = 0x3131
let [<Literal>] GG = 0x3132
let [<Literal>] GS = 0x3133
let [<Literal>] N = 0x3134
let [<Literal>] NJ = 0x3135
let [<Literal>] NH = 0x3136
let [<Literal>] D = 0x3137
let [<Literal>] DD = 0x3138
let [<Literal>] L = 0x3139
let [<Literal>] LG = 0x313a
let [<Literal>] LM = 0x313b
let [<Literal>] LB = 0x313c
let [<Literal>] LS = 0x313d
let [<Literal>] LT = 0x313e
let [<Literal>] LP = 0x313f
let [<Literal>] LH = 0x3140
let [<Literal>] M = 0x3141
let [<Literal>] B = 0x3142
let [<Literal>] BB = 0x3143
let [<Literal>] BS = 0x3144
let [<Literal>] S = 0x3145
let [<Literal>] SS = 0x3146
let [<Literal>] ZS = 0x3147
let [<Literal>] J = 0x3148
let [<Literal>] JJ = 0x3149
let [<Literal>] C = 0x314a
let [<Literal>] K = 0x314b
let [<Literal>] T = 0x314c
let [<Literal>] P = 0x314d
let [<Literal>] H = 0x314e
let [<Literal>] A = 0x314f
let [<Literal>] AE = 0x3150
let [<Literal>] YA = 0x3151
let [<Literal>] YAE = 0x3152
let [<Literal>] EO = 0x3153
let [<Literal>] E = 0x3154
let [<Literal>] YEO = 0x3155
let [<Literal>] YE = 0x3156
let [<Literal>] O = 0x3157
let [<Literal>] WA = 0x3158
let [<Literal>] WAE = 0x3159
let [<Literal>] OE = 0x315a
let [<Literal>] YO = 0x315b
let [<Literal>] U = 0x315c
let [<Literal>] WEO = 0x315d
let [<Literal>] WE = 0x315e
let [<Literal>] WI = 0x315f
let [<Literal>] YU = 0x3160
let [<Literal>] EU = 0x3161
let [<Literal>] YI = 0x3162
let [<Literal>] I = 0x3163
let [<Literal>] LeadG = 0x1100
let [<Literal>] LeadGG = 0x1101
let [<Literal>] LeadN = 0x1102
let [<Literal>] LeadD = 0x1103
let [<Literal>] LeadDD = 0x1104
let [<Literal>] LeadR = 0x1105
let [<Literal>] LeadM = 0x1106
let [<Literal>] LeadB = 0x1107
let [<Literal>] LeadBB = 0x1108
let [<Literal>] LeadS = 0x1109
let [<Literal>] LeadSS = 0x110a
let [<Literal>] LeadZS = 0x110b
let [<Literal>] LeadJ = 0x110c
let [<Literal>] LeadJJ = 0x110d
let [<Literal>] LeadC = 0x110e
let [<Literal>] LeadK = 0x110f
let [<Literal>] LeadT = 0x1110
let [<Literal>] LeadP = 0x1111
let [<Literal>] LeadH = 0x1112
let [<Literal>] MedialA = 0x1161
let [<Literal>] MedialAE = 0x1162
let [<Literal>] MedialYA = 0x1163
let [<Literal>] MedialYAE = 0x1164
let [<Literal>] MedialEO = 0x1165
let [<Literal>] MedialE = 0x1166
let [<Literal>] MedialYEO = 0x1167
let [<Literal>] MedialYE = 0x1168
let [<Literal>] MedialO = 0x1169
let [<Literal>] MedialWA = 0x116a
let [<Literal>] MedialWAE = 0x116b
let [<Literal>] MedialOE = 0x116c
let [<Literal>] MedialYO = 0x116d
let [<Literal>] MedialU = 0x116e
let [<Literal>] MedialWEO = 0x116f
let [<Literal>] MedialWE = 0x1170
let [<Literal>] MedialWI = 0x1171
let [<Literal>] MedialYU = 0x1172
let [<Literal>] MedialEU = 0x1173
let [<Literal>] MedialYI = 0x1174
let [<Literal>] MedialI = 0x1175
let [<Literal>] TailG = 0x11a8
let [<Literal>] TailGG = 0x11a9
let [<Literal>] TailGS = 0x11aa
let [<Literal>] TailN = 0x11ab
let [<Literal>] TailNJ = 0x11ac
let [<Literal>] TailNH = 0x11ad
let [<Literal>] TailD = 0x11ae
let [<Literal>] TailL = 0x11af
let [<Literal>] TailLG = 0x11b0
let [<Literal>] TailLM = 0x11b1
let [<Literal>] TailLB = 0x11b2
let [<Literal>] TailLS = 0x11b3
let [<Literal>] TailLT = 0x11b4
let [<Literal>] TailLP = 0x11b5
let [<Literal>] TailLH = 0x11b6
let [<Literal>] TailM = 0x11b7
let [<Literal>] TailB = 0x11b8
let [<Literal>] TailBB = 0x11b9
let [<Literal>] TailBS = 0x11ba
let [<Literal>] TailS = 0x11bb
let [<Literal>] TailSS = 0x11bc
let [<Literal>] TailNG = 0x11bd
let [<Literal>] TailJ = 0x11be
let [<Literal>] TailC = 0x11bf
let [<Literal>] TailK = 0x11c0
let [<Literal>] TailT = 0x11c1
let [<Literal>] TailP = 0x11c2
let [<Literal>] TailH = 0x11c5

#!markdown

### isHangul

#!fsharp

let isHangul (r: char) =
    let r = int r
    match r with
    | _ when r >= 0xAC00 && r <= 0xD7A3 -> true
    | _ when (r >= G && r <= H) -> true
    | _ when (r >= LeadG && r <= LeadH) -> true
    | _ when (r >= MedialA && r <= MedialI) -> true
    | _ when (r >= TailG && r <= TailH) -> true
    | _ -> false

#!markdown

### isJaeum

#!fsharp

let isJaeum (r: char) =
    let r = int r
    match r with
    | _ when r >= G && r <= H -> true
    | _ when r >= LeadG && r <= LeadH -> true
    | _ when r >= TailG && r <= TailH -> true
    | _ -> false

#!markdown

### isMoeum

#!fsharp

let isMoeum (r: char) =
    let r = int r
    match r with
    | _ when r >= A && r <= I -> true
    | _ when r >= MedialA && r <= MedialI -> true
    | _ -> false

#!markdown

### leadIdx

#!fsharp

let leadIdx (r: int) =
    match r with
    | LeadG -> Some 0
    | LeadGG -> Some 1
    | LeadN -> Some 2
    | LeadD -> Some 3
    | LeadDD -> Some 4
    | LeadR -> Some 5
    | LeadM -> Some 6
    | LeadB -> Some 7
    | LeadBB -> Some 8
    | LeadS -> Some 9
    | LeadSS -> Some 10
    | LeadZS -> Some 11
    | LeadJ -> Some 12
    | LeadJJ -> Some 13
    | LeadC -> Some 14
    | LeadK -> Some 15
    | LeadT -> Some 16
    | LeadP -> Some 17
    | LeadH -> Some 18
    | _ -> None

#!markdown

### medialIdx

#!fsharp

let medialIdx (r: int) =
    match r with
    | MedialA -> Some 0
    | MedialAE -> Some 1
    | MedialYA -> Some 2
    | MedialYAE -> Some 3
    | MedialEO -> Some 4
    | MedialE -> Some 5
    | MedialYEO -> Some 6
    | MedialYE -> Some 7
    | MedialO -> Some 8
    | MedialWA -> Some 9
    | MedialWAE -> Some 10
    | MedialOE -> Some 11
    | MedialYO -> Some 12
    | MedialU -> Some 13
    | MedialWEO -> Some 14
    | MedialWE -> Some 15
    | MedialWI -> Some 16
    | MedialYU -> Some 17
    | MedialEU -> Some 18
    | MedialYI -> Some 19
    | MedialI -> Some 20
    | _ -> None

#!markdown

### tailIdx

#!fsharp

let tailIdx (r: int) =
    match r with
    | 0 -> Some 0
    | TailG -> Some 1
    | TailGG -> Some 2
    | TailGS -> Some 3
    | TailN -> Some 4
    | TailNJ -> Some 5
    | TailNH -> Some 6
    | TailD -> Some 7
    | TailL -> Some 8
    | TailLG -> Some 9
    | TailLM -> Some 10
    | TailLB -> Some 11
    | TailLS -> Some 12
    | TailLT -> Some 13
    | TailLP -> Some 14
    | TailLH -> Some 15
    | TailM -> Some 16
    | TailB -> Some 17
    | TailBS -> Some 18
    | TailS -> Some 19
    | TailSS -> Some 20
    | TailNG -> Some 21
    | TailJ -> Some 22
    | TailC -> Some 23
    | TailK -> Some 24
    | TailT -> Some 25
    | TailP -> Some 26
    | TailH -> Some 27
    | _ -> None

#!markdown

### toLead

#!fsharp

let toLead (r: int) =
    match r with
    | G -> Some LeadG
    | GG -> Some LeadGG
    | N -> Some LeadN
    | D -> Some LeadD
    | DD -> Some LeadDD
    | L -> Some LeadR
    | M -> Some LeadM
    | B -> Some LeadB
    | BB -> Some LeadBB
    | S -> Some LeadS
    | SS -> Some LeadSS
    | ZS -> Some LeadZS
    | J -> Some LeadJ
    | JJ -> Some LeadJJ
    | C -> Some LeadC
    | K -> Some LeadK
    | T -> Some LeadT
    | P -> Some LeadP
    | H -> Some LeadH
    | _ -> None

#!markdown

### toMedial

#!fsharp

let toMedial (r: int) =
    if r >= A && r <= I then Some(r - A + MedialA)
    else None

#!markdown

### toTail

#!fsharp

let toTail (r: int) =
    match r with
    | G -> Some TailG
    | GG -> Some TailGG
    | GS -> Some TailGS
    | N -> Some TailN
    | NJ -> Some TailNJ
    | NH -> Some TailNH
    | D -> Some TailD
    | L -> Some TailL
    | LG -> Some TailLG
    | LM -> Some TailLM
    | LB -> Some TailLB
    | LS -> Some TailLS
    | LT -> Some TailLT
    | LP -> Some TailLP
    | LH -> Some TailLH
    | M -> Some TailM
    | B -> Some TailB
    | BB -> Some TailBB
    | BS -> Some TailBS
    | S -> Some TailS
    | SS -> Some TailSS
    | ZS -> Some TailNG
    | J -> Some TailJ
    | C -> Some TailC
    | K -> Some TailK
    | T -> Some TailT
    | P -> Some TailP
    | H -> Some TailH
    | _ -> None

#!markdown

### lead

#!fsharp

let lead (r: int) =
    match toLead r with
    | Some l -> l
    | None -> r

#!markdown

### medial

#!fsharp

let medial (r: int) =
    match toMedial r with
    | Some m -> m
    | None -> r

#!markdown

### tail

#!fsharp

let tail (r: int) =
    match toTail r with
    | Some t -> t
    | None -> r

#!markdown

### join

#!fsharp

let join (l: char) (m: char) (t: char) =
    let li, mi, ti = lead (int l), medial (int m), tail (int t)
    match leadIdx li, medialIdx mi, tailIdx ti with
    | Some li', Some mi', Some ti' -> char (0xAC00 + (li' * 21 + mi') * 28 + ti')
    | _ -> char 0xFFFD

#!fsharp

//// test

AssertAreEqual('서', join (char LeadS) (char MedialEO) (char 0))

#!fsharp

//// test

AssertAreEqual('울', join (char LeadZS) (char MedialU) (char TailL))

#!fsharp

//// test

AssertAreEqual('평', join (char LeadP) (char MedialYEO) (char TailNG))

#!fsharp

//// test

AssertAreEqual('양', join (char LeadZS) (char MedialYA) (char TailNG))

#!markdown

### indexToTailMap

#!fsharp

let indexToTailMap =
    Map.ofList [
        (1, TailG); (2, TailGG); (3, TailGS); (4, TailN); (5, TailNJ); (6, TailNH);
        (7, TailD); (8, TailL); (9, TailLG); (10, TailLM); (11, TailLB); (12, TailLS);
        (13, TailLT); (14, TailLP); (15, TailLH); (16, TailM); (17, TailB); (18, TailBS);
        (19, TailS); (20, TailSS); (21, TailNG); (22, TailJ); (23, TailC); (24, TailK);
        (25, TailT); (26, TailP); (27, TailH)
    ]

#!markdown

### split

#!fsharp

let split (c: char) =
    let c' = int c
    if c' < 0xAC00 || c' > 0xD7A3
    then (char 0, char 0, char 0)
    else
        let syllableIndex = c' - 0xAC00
        let lIndex = syllableIndex / (21 * 28)
        let mIndex = (syllableIndex % (21 * 28)) / 28
        let tIndex = syllableIndex % 28
        let l = char (LeadG + lIndex)
        let m = char (MedialA + mIndex)
        let t =
            match indexToTailMap.TryFind(tIndex) with
            | Some tailChar -> char tailChar
            | None -> char 0
        l, m, t

#!fsharp

//// test

let i, m, t = split '자'
AssertAreEqual(char LeadJ, i)
AssertAreEqual(char MedialA, m)
AssertAreEqual(char 0, t)

#!markdown

### leadStrokeMap

#!fsharp

let leadStrokeMap =
    Map.ofList [
        (LeadG, 1); (LeadGG, 2); (LeadN, 1); (LeadD, 2); (LeadDD, 4); (LeadR, 3);
        (LeadM, 3); (LeadB, 4); (LeadBB, 8); (LeadS, 2); (LeadSS, 4); (LeadZS, 1);
        (LeadJ, 3); (LeadJJ, 6); (LeadC, 4); (LeadK, 2); (LeadT, 3); (LeadP, 4); (LeadH, 3);
    ]

#!markdown

### medialStrokeMap

#!fsharp

let medialStrokeMap =
    Map.ofList [
        (MedialA, 2); (MedialAE, 3); (MedialYA, 3); (MedialYAE, 4); (MedialEO, 2);
        (MedialE, 3); (MedialYEO, 3); (MedialYE, 4); (MedialO, 2); (MedialWA, 4);
        (MedialWAE, 5); (MedialOE, 3); (MedialYO, 3); (MedialU, 2); (MedialWEO, 4);
        (MedialWE, 5); (MedialWI, 4); (MedialYU, 3); (MedialEU, 1); (MedialYI, 2); (MedialI, 1);
    ]

#!markdown

### tailStrokeMap

#!fsharp

let tailStrokeMap =
    Map.ofList [
        (TailG, 1); (TailGG, 2); (TailGS, 3); (TailN, 1); (TailNJ, 5); (TailNH, 5);
        (TailD, 2); (TailL, 3); (TailLG, 4); (TailLM, 6); (TailLB, 7); (TailLS, 5);
        (TailLT, 6); (TailLP, 7); (TailLH, 6); (TailM, 3); (TailB, 4); (TailBB, 8);
        (TailBS, 6); (TailS, 2); (TailSS, 4); (TailNG, 1); (TailJ, 3); (TailC, 4);
        (TailK, 2); (TailT, 3); (TailP, 4); (TailH, 3);
    ]

#!markdown

### strokeMap

#!fsharp

let strokeMap =
    Map.ofList [
        (G, 1); (N, 1); (D, 2); (L, 3); (M, 3); (B, 4); (S, 2); (ZS, 1);
        (J, 3); (C, 4); (K, 2); (T, 3); (P, 4); (H, 3); (A, 2); (YA, 3);
        (EO, 2); (YEO, 3); (O, 2); (YO, 3); (U, 2); (YU, 3); (EU, 1); (I, 1)
    ]

#!markdown

### multiElementStrokes

#!fsharp

let multiElementStrokes =
    Map.ofList [
        (GG, 2); (GS, 3); (NJ, 5); (NH, 5); (DD, 4); (LG, 4); (LM, 6);
        (LB, 7); (LS, 5); (LT, 6); (LP, 7); (LH, 6); (BB, 8); (BS, 6);
        (SS, 4); (JJ, 6); (AE, 3); (E, 3); (YAE, 4); (YE, 4); (WA, 4);
        (WAE, 5); (OE, 3); (WEO, 4); (WE, 5); (WI, 4); (YI, 2)
    ]

#!markdown

### stroke

#!fsharp

let rec stroke (r: char) =
    let r' = int r
    if r' >= 0xAC00 && r' <= 0xD7A3 then
        let l, m, t = split r
        stroke l + stroke m + stroke t
    else
        match leadStrokeMap.TryFind r' with
        | Some s -> s
        | None ->
            match medialStrokeMap.TryFind r' with
            | Some s -> s
            | None ->
                match tailStrokeMap.TryFind r' with
                | Some s -> s
                | None ->
                    match strokeMap.TryFind r' with
                    | Some s -> s
                    | None ->
                        match multiElementStrokes.TryFind r' with
                        | Some s -> s
                        | None -> 0

#!fsharp

//// test

AssertAreEqual(5, stroke '세')

#!fsharp

//// test

AssertAreEqual(5, stroke '상')

#!fsharp

//// test

AssertAreEqual(3, stroke '아')

#!fsharp

//// test

AssertAreEqual(0, stroke ' ')

#!fsharp

//// test

AssertAreEqual(4, stroke '안')

#!fsharp

//// test

AssertAreEqual(5, stroke '녕')

#!fsharp

//// test

AssertAreEqual(6, stroke (char JJ))

#!fsharp

//// test

AssertAreEqual(4, stroke (char YAE))

#!fsharp

//// test

AssertAreEqual(5, stroke (char WAE))

#!markdown

### endsWithConsonant

#!fsharp

let endsWithConsonant (s: string) =
    if String.IsNullOrEmpty(s) then false
    else
        let lastChar = s.[s.Length - 1]
        if not (isHangul lastChar) then false
        else
            let _, _, t = split lastChar
            t <> char 0

#!fsharp

//// test

AssertIsTrue(endsWithConsonant "강")

#!fsharp

//// test

AssertIsFalse(endsWithConsonant "물고기")

#!markdown

### lastConsonant

#!fsharp

let lastConsonant (s: string) =
    if String.IsNullOrEmpty(s) then char 0
    else
        let lastChar = s.[s.Length - 1]
        if not (isHangul lastChar) then char 0
        else
            let _, _, t = split lastChar
            t

#!fsharp

//// test

AssertAreEqual(int (char TailNG), int (lastConsonant "강"))

#!fsharp

//// test

AssertAreEqual(char 0, lastConsonant "물고기")

#!markdown

### appendPostposition

#!fsharp

let appendPostposition (s: string) (withConsonant: string) (withoutConsonant: string) =
    if endsWithConsonant s then s + withConsonant
    else s + withoutConsonant

#!fsharp

//// test

AssertAreEqual("강이", appendPostposition "강" "이" "가")

#!fsharp

//// test

AssertAreEqual("물고기는", appendPostposition "물고기" "은" "는")

#!markdown

## CP949

#!fsharp

#!import cp949_from.fs

// let cp949FromTable : LookupItem[] =
//     [|
//         { cp949 = 0x8141; ucs2 = 0xac02 };
//         { cp949 = 0x8142; ucs2 = 0xac03 };
//         // (...)
//         { cp949 = 0xfdfd; ucs2 = 0x7fb2 };
//         { cp949 = 0xfdfe; ucs2 = 0x8a70 };
//     |]

#!fsharp

#!import cp949_to.fs

// let cp949ToTable : LookupItem[] =
//     [|
//         { ucs2 = 0x00a1; cp949 = 0xa2ae };
//         { ucs2 = 0x00a4; cp949 = 0xa2b4 };
//         // (...)
//         { ucs2 = 0xffe5; cp949 = 0xa1cd };
//         { ucs2 = 0xffe6; cp949 = 0xa3dc };
//     |]

#!markdown

### LookupItem

#!fsharp

type LookupItem = { cp949: int; ucs2: int }

#!markdown

### fromCp949

#!fsharp

let fromCp949 (data: byte[]) =
    let mutable result = System.Text.StringBuilder()
    let mutable i = 0
    while i < data.Length do
        if data.[i] < 0x80uy then
            result.Append(char data.[i]) |> ignore
            i <- i + 1
        else
            if i + 1 < data.Length then
                let cp949code = (uint16 data.[i] <<< 8) ||| (uint16 data.[i+1]) |> int
                let found = cp949FromTable |> Array.tryFind (fun item -> item.cp949 = cp949code)
                match found with
                | Some item -> result.Append(char item.ucs2) |> ignore
                | None -> result.Append(char 0xFFFD) |> ignore
                i <- i + 2
            else
                result.Append(char 0xFFFD) |> ignore
                i <- i + 1
    result.ToString()

#!fsharp

//// test

let cp949Bytes = [|0xb0; 0xa1; 0xb0; 0xa2|] |> Array.map byte
AssertAreEqual("가각", fromCp949 cp949Bytes)

#!markdown

### toCp949

#!fsharp

let toCp949 (s: string) =
    let mutable result = System.Collections.Generic.List<byte>()
    for c in s do
        let ucs2code = int c
        if ucs2code < 0x80 then
            result.Add(byte ucs2code)
        else
            let found = cp949ToTable |> Array.tryFind (fun item -> item.ucs2 = ucs2code)
            match found with
            | Some item ->
                result.Add(byte (item.cp949 >>> 8))
                result.Add(byte (item.cp949 &&& 0xFF))
            | None ->
                result.Add(byte 0x3F) // '?'
    result.ToArray()

#!fsharp

//// test

let utf8String = "가각"
let expectedBytes = [|0xb0; 0xa1; 0xb0; 0xa2|] |> Array.map byte
AssertAreEqual(expectedBytes, toCp949 utf8String)

#!markdown

## Jamo

#!markdown

### compatJamoMap

#!fsharp

let compatJamoMap =
    Map.ofList [
        (LeadG, G); (LeadGG, GG); (LeadN, N); (LeadD, D); (LeadDD, DD); (LeadR, L);
        (LeadM, M); (LeadB, B); (LeadBB, BB); (LeadS, S); (LeadSS, SS); (LeadZS, ZS);
        (LeadJ, J); (LeadJJ, JJ); (LeadC, C); (LeadK, K); (LeadT, T); (LeadP, P); (LeadH, H);
        (MedialA, A); (MedialAE, AE); (MedialYA, YA); (MedialYAE, YAE); (MedialEO, EO);
        (MedialE, E); (MedialYEO, YEO); (MedialYE, YE); (MedialO, O); (MedialWA, WA);
        (MedialWAE, WAE); (MedialOE, OE); (MedialYO, YO); (MedialU, U); (MedialWEO, WEO);
        (MedialWE, WE); (MedialWI, WI); (MedialYU, YU); (MedialEU, EU); (MedialYI, YI); (MedialI, I);
        (TailG, G); (TailGG, GG); (TailGS, GS); (TailN, N); (TailNJ, NJ); (TailNH, NH);
        (TailD, D); (TailL, L); (TailLG, LG); (TailLM, LM); (TailLB, LB); (TailLS, LS);
        (TailLT, LT); (TailLP, LP); (TailLH, LH); (TailM, M); (TailB, B); (TailBS, BS);
        (TailS, S); (TailSS, SS); (TailNG, ZS); (TailJ, J); (TailC, C); (TailK, K);
        (TailT, T); (TailP, P); (TailH, H)
    ]

#!markdown

### compatJamo

#!fsharp

let compatJamo (c: char) =
    let c' = int c
    match compatJamoMap.TryFind(c') with
    | Some compat -> char compat
    | None -> c

#!fsharp

//// test

AssertAreEqual(char G, compatJamo (char LeadG))

#!fsharp

//// test

AssertAreEqual(char A, compatJamo (char MedialA))

#!fsharp

//// test

AssertAreEqual(char L, compatJamo (char TailL))

#!fsharp

//// test

AssertAreEqual(char B, compatJamo (char B))

#!fsharp

//// test

AssertAreEqual('a', compatJamo 'a')
